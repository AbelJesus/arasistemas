/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Formularios;

import Banco.Conexao;
import Controle.AgendaDAO;
import java.awt.Point;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import modelo.Agenda;


/**
 *
 * @author Abel
 */
public class FrmAgenda extends javax.swing.JFrame {
    
    
    Connection conexao;
    Agenda agenda = new Agenda();
    AgendaDAO agendaDAO = new AgendaDAO();
    DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
    DateFormat hora = new SimpleDateFormat("HH:mm");
    Calendar c = Calendar.getInstance();

            
   
    
    int idFuncionario, id, idCliente, idServico;
    /**
     * Creates new form FrmAgenda
     */
    public FrmAgenda() {
        initComponents();
        configuraJTable();
        carregaCBOServicos();
        carregaCBOFuncionarios();
        carregaCBOClientes();
        populaJTable();
    
     
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JCalendario = new com.toedter.calendar.JCalendar();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTableAgenda = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        dtaFim1 = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        dtaInicio1 = new com.toedter.calendar.JDateChooser();
        btnFiltrar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtTexto = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        cboClientes = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cboFuncioario = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        cboServicos = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        sfHH = new com.toedter.components.JSpinField();
        sfMM = new com.toedter.components.JSpinField();
        jPanel3 = new javax.swing.JPanel();
        btnImprimir = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        btnGravar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Agendamento");

        JCalendario.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        JCalendario.setDecorationBordersVisible(true);
        JCalendario.setWeekOfYearVisible(false);
        JCalendario.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                JCalendarioPropertyChange(evt);
            }
        });

        JTableAgenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Horário", "Cliente", "Serviço", "Funcionário", "Texto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTableAgenda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTableAgendaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JTableAgenda);
        if (JTableAgenda.getColumnModel().getColumnCount() > 0) {
            JTableAgenda.getColumnModel().getColumn(0).setResizable(false);
            JTableAgenda.getColumnModel().getColumn(1).setResizable(false);
            JTableAgenda.getColumnModel().getColumn(2).setResizable(false);
            JTableAgenda.getColumnModel().getColumn(3).setResizable(false);
            JTableAgenda.getColumnModel().getColumn(4).setResizable(false);
            JTableAgenda.getColumnModel().getColumn(5).setResizable(false);
        }

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Impressão e Consulta por Periodo"));

        dtaFim1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        dtaFim1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dtaFim1FocusGained(evt);
            }
        });
        dtaFim1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dtaFim1MouseClicked(evt);
            }
        });
        dtaFim1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dtaFim1PropertyChange(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        jLabel7.setText("Inicio:");

        jLabel8.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        jLabel8.setText("Fim:");

        dtaInicio1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N

        btnFiltrar.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        btnFiltrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/filtro 24x24.png"))); // NOI18N
        btnFiltrar.setText("Filtrar");
        btnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dtaInicio1, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                    .addComponent(dtaFim1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(dtaInicio1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addComponent(dtaFim1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addComponent(btnFiltrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        txtTexto.setColumns(20);
        txtTexto.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTexto.setLineWrap(true);
        txtTexto.setRows(5);
        txtTexto.setText("Digite aqui suas observações");
        txtTexto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTextoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTextoFocusLost(evt);
            }
        });
        jScrollPane3.setViewportView(txtTexto);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Informações"));

        cboClientes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboClientesActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        jLabel5.setText("Cliente:");

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        jLabel2.setText("Funcionário:");

        cboFuncioario.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboFuncioario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFuncioarioActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        jLabel1.setText("Horário:");

        cboServicos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboServicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboServicosActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        jLabel6.setText("Serviço:");

        sfHH.setMaximum(23);
        sfHH.setMinimum(0);

        sfMM.setMaximum(59);
        sfMM.setMinimum(0);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboFuncioario, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sfHH, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sfMM, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboServicos, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboClientes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel6)
                        .addComponent(cboServicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sfHH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sfMM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cboFuncioario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Finalizar"));

        btnImprimir.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/Fluxo de Caixa 16 x 16.png"))); // NOI18N
        btnImprimir.setText("Imprimir");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnRemover.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        btnRemover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/Excluir 22 x 22.png"))); // NOI18N
        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        btnGravar.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        btnGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/Gravar 22 x 22.png"))); // NOI18N
        btnGravar.setText("Gravar");
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnGravar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemover, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnImprimir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JCalendario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JCalendario, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(966, 696));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void JCalendarioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_JCalendarioPropertyChange
            populaJTable();
    }//GEN-LAST:event_JCalendarioPropertyChange

    private void JTableAgendaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTableAgendaMouseClicked
            if(evt.getClickCount() == 2){
                
                try {
                    Point p = evt.getPoint();
                    int row = JTableAgenda.rowAtPoint(p);
                    btnGravar.setText("ALTERAR");
                    c.setTime(hora.parse(String.valueOf(JTableAgenda.getModel().getValueAt(row, 1))));
                    cboClientes.setSelectedItem(String.valueOf(JTableAgenda.getModel().getValueAt(row, 2)));
                    cboServicos.setSelectedItem(String.valueOf(JTableAgenda.getModel().getValueAt(row, 3)));
                    cboFuncioario.setSelectedItem(String.valueOf(JTableAgenda.getModel().getValueAt(row, 4)));
                    txtTexto.setText(String.valueOf(JTableAgenda.getModel().getValueAt(row, 5)));
                    id = Integer.parseInt(String.valueOf(JTableAgenda.getModel().getValueAt(row, 0)));
                    sfHH.setValue(c.get(Calendar.HOUR_OF_DAY));
                    sfMM.setValue(c.get(Calendar.MINUTE));
                } catch (ParseException ex) {
                    Logger.getLogger(FrmAgenda.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
    }//GEN-LAST:event_JTableAgendaMouseClicked

    private void txtTextoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTextoFocusGained
            if("Digite aqui suas observações".equals(txtTexto.getText())){
                txtTexto.setText("");
            }
    }//GEN-LAST:event_txtTextoFocusGained

    private void txtTextoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTextoFocusLost
            if("".equals(txtTexto.getText())){
                txtTexto.setText("Digite aqui suas observações");
            }
    }//GEN-LAST:event_txtTextoFocusLost

    private void cboFuncioarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFuncioarioActionPerformed
        retornaIDFuncionario();
}//GEN-LAST:event_cboFuncioarioActionPerformed

    private void cboClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboClientesActionPerformed
        // TODO add your handling code here:
        retornaIDCliente();
}//GEN-LAST:event_cboClientesActionPerformed

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        // TODO add your handling code here:
        if("Gravar".equals(btnGravar.getText()))
        {
            grava();
            populaJTable();
        }
        else
        {
            int resp = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar esse horário?", "Alterar", JOptionPane.YES_NO_OPTION);
            if(resp == JOptionPane.YES_OPTION)
            {
               
                atualiza();
                
            }
        }
    }//GEN-LAST:event_btnGravarActionPerformed

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        // TODO add your handling code here:
        if(id  != 0)
        {
            int resp = JOptionPane.showConfirmDialog(null, "Deseja realmente remover este agendamento ?", "Remover", JOptionPane.YES_NO_OPTION);
            
            if(resp == JOptionPane.YES_OPTION)
            {
                agenda.setId(id);
                agendaDAO.removerAgenda(agenda);
                populaJTable();
                JOptionPane.showMessageDialog(null, "Agendamento removido com sucesso", "Remover", JOptionPane.INFORMATION_MESSAGE);
                
            }
            else
            {
                id = 0;
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Favor selecionar um agendamento !!!", "Remover", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void cboServicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboServicosActionPerformed
        // TODO add your handling code here:
        retornaIDServico();
    }//GEN-LAST:event_cboServicosActionPerformed

    private void dtaFim1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dtaFim1PropertyChange
        
        
            
        
        
    }//GEN-LAST:event_dtaFim1PropertyChange

    private void dtaFim1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dtaFim1MouseClicked
       
    }//GEN-LAST:event_dtaFim1MouseClicked

    private void dtaFim1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dtaFim1FocusGained
       
    }//GEN-LAST:event_dtaFim1FocusGained

    private void btnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarActionPerformed
        consultaPeriodo();
    }//GEN-LAST:event_btnFiltrarActionPerformed

    
    
    
    private void carregaCBOFuncionarios()
    {
        
        try {
            this.conexao = Conexao.getConexao();
            
            String sql = "Select id, nome from funcionarios";
            PreparedStatement ps = this.conexao.prepareStatement(sql);
            ResultSet rsts = ps.executeQuery();
            
            while(rsts.next()){
                
                cboFuncioario.addItem(rsts.getString("nome"));
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmAgenda.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }
    
    private void carregaCBOClientes()
    {
        try
        {
            this.conexao = Conexao.getConexao();
            String sql = "Select id, nome from clientes";
            PreparedStatement ps = this.conexao.prepareStatement(sql);
            ResultSet rsts = ps.executeQuery();
            
            while(rsts.next())
            {
                cboClientes.addItem(rsts.getString("nome"));
                
            }
        }
        catch (SQLException ex) 
        {
            Logger.getLogger(FrmAgenda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void carregaCBOServicos()
    {
        try
        {
            this.conexao = Conexao.getConexao();
            String sql = "select id, descricao from servicos";
            PreparedStatement ps = this.conexao.prepareStatement(sql);
            ResultSet rsts = ps.executeQuery();
            
            while(rsts.next())
            {
                cboServicos.addItem(rsts.getString("descricao"));
            }
        }
        catch (SQLException ex)
        {
             Logger.getLogger(FrmAgenda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    
    private void configuraJTable(){
        
        JTableAgenda.getColumnModel().getColumn(0).setPreferredWidth(30);
        JTableAgenda.getColumnModel().getColumn(1).setPreferredWidth(150);
        JTableAgenda.getColumnModel().getColumn(2).setPreferredWidth(150);
        JTableAgenda.getColumnModel().getColumn(3).setPreferredWidth(150);
        JTableAgenda.getColumnModel().getColumn(4).setPreferredWidth(150);
        JTableAgenda.getColumnModel().getColumn(5).setPreferredWidth(150);
        
        
    }
    
    private void populaJTable(){
        
        try {
            this.conexao = Conexao.getConexao();
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            DefaultTableModel modelo = (DefaultTableModel)JTableAgenda.getModel();
            modelo.setNumRows(0);
            
            
            String sql = " Select ag.id, fu.nome, hora, texto, cl.nome, se.descricao from agenda ag  "
                    + "inner join funcionarios fu on ag.id_funcionario = fu.id "
                    + " inner join clientes cl on ag.id_cliente = cl.id"
                    + " inner join servicos se on ag.id_servico = se.id"
                    + " where ag.data = ?";
            PreparedStatement ps = this.conexao.prepareStatement(sql);
            ps.setString(1, df.format(JCalendario.getDate()) );
            ResultSet rsts = ps.executeQuery();
            
            
            
            
            MaskFormatter mf = new MaskFormatter("##:##");
            
            while(rsts.next()){
                
                 modelo.addRow(new Object[]{ rsts.getInt("ag.id"),
                                             mf.valueToString(rsts.getTime("hora")),
                                             rsts.getString("cl.nome"),
                                             rsts.getString("se.descricao"),
                                             rsts.getString("fu.nome"),
                                             rsts.getString("texto")
            
            });
                
            }
            
            limparCampos();
           
        } catch (SQLException ex) {
            Logger.getLogger(FrmAgenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException err){
            
        }
        
    }
    
    private void retornaIDCliente()
    {
        try       
        {
            this.conexao = Conexao.getConexao();
            String sql = "Select id from clientes where nome = ?";
            PreparedStatement ps = this.conexao.prepareStatement(sql);
            ps.setString(1, cboClientes.getSelectedItem().toString());
            ResultSet rsts = ps.executeQuery();
            
            rsts.next();
            
            idCliente = rsts.getInt("id");
     
        }
        catch (SQLException ex)  
        {
            Logger.getLogger(FrmAgenda.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }
    
    private void retornaIDServico()
    {
         
        try       
        {
            this.conexao = Conexao.getConexao();
            String sql = "Select id from servicos where descricao = ?";
            PreparedStatement ps = this.conexao.prepareStatement(sql);
            ps.setString(1, cboServicos.getSelectedItem().toString());
            ResultSet rsts = ps.executeQuery();
            
            rsts.next();
            
            idServico = rsts.getInt("id");
        }
        catch (SQLException ex)  
        {
            Logger.getLogger(FrmAgenda.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }
    
    private void retornaIDFuncionario()
    {
        
          
        try       
        {
            this.conexao = Conexao.getConexao();
            String sql = "Select id from funcionarios where nome = ?";
            PreparedStatement ps = this.conexao.prepareStatement(sql);             
            ps.setString(1, cboFuncioario.getSelectedItem().toString());
            ResultSet rsts = ps.executeQuery();      
            rsts.next();          
            idFuncionario = rsts.getInt("id");
        }  
        catch (SQLException ex)  
        {
            Logger.getLogger(FrmAgenda.class.getName()).log(Level.SEVERE, null, ex);
            
        }
        
    }
    
    private void grava()
    {
        
       if(!"".equals(txtTexto.getText()))
       { 
            c.set(Calendar.HOUR_OF_DAY, sfHH.getValue());
            c.set(Calendar.MINUTE, sfMM.getValue());    
            agenda.setIdFuncionario(idFuncionario);
            agenda.setIdCliente(idCliente);
            agenda.setIdServico(idServico);
            agenda.setHora(hora.format(c.getTime()));
            agenda.setData(JCalendario.getDate());
            agenda.setTexto(txtTexto.getText());
            agendaDAO.gravaAgenda(agenda);
            JOptionPane.showMessageDialog(null, "Agendado com Sucesso", "Agenda", JOptionPane.INFORMATION_MESSAGE);
       }
       else
       {
           JOptionPane.showMessageDialog(null, "Existem campos a serem preenchidos !!!", "Erro", JOptionPane.ERROR_MESSAGE);
       }
    }
    
    public void atualiza(){
                
                c.set(Calendar.HOUR_OF_DAY, sfHH.getValue());
                c.set(Calendar.MINUTE, sfMM.getValue());
                
                agenda.setId(id);
                agenda.setIdFuncionario(idFuncionario);
                agenda.setIdCliente(idCliente);
                agenda.setIdServico(idServico);
                agenda.setData(JCalendario.getDate());
                agenda.setHora(hora.format(c.getTime()));
                agenda.setTexto(txtTexto.getText());
                agendaDAO.alterarAgenda(agenda);
                populaJTable();
                btnGravar.setText("Gravar");
    }
    
    private void limparCampos(){
         //txtHora.setText("");
         txtTexto.setText("Digite aqui suas observações");
         btnGravar.setText("Gravar");
         
         //Seta o id para 0, para não ficar armazenado
         id = 0;
    }
    
    private void consultaPeriodo(){
        
        try {
            this.conexao = Conexao.getConexao();
            
            String sql = " Select ag.id, fu.nome, hora, texto, cl.nome, se.descricao from agenda ag  "
                    + "inner join funcionarios fu on ag.id_funcionario = fu.id "
                    + " inner join clientes cl on ag.id_cliente = cl.id"
                    + " inner join servicos se on ag.id_servico = se.id"
                    + " where ag.data >= ? and ag.data <= ?";
            
            PreparedStatement ps = this.conexao.prepareStatement(sql);
            ps.setString(1, df.format(dtaInicio1.getDate()));
            ps.setString(2, df.format(dtaFim1.getDate()));
            ResultSet rsts = ps.executeQuery();
            
               
            MaskFormatter mf = new MaskFormatter("##:##");
            DefaultTableModel modelo = (DefaultTableModel)JTableAgenda.getModel();
            modelo.setNumRows(0);
            while(rsts.next()){
                
                 modelo.addRow(new Object[]{ rsts.getInt("ag.id"),
                                             mf.valueToString(rsts.getTime("hora")),
                                             rsts.getString("cl.nome"),
                                             rsts.getString("se.descricao"),
                                             rsts.getString("fu.nome"),
                                             rsts.getString("texto")
            
            });
                
            }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(FrmAgenda.class.getName()).log(Level.SEVERE, null, ex);
        }catch(ParseException err){
            
        }
        
    }
  
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmAgenda().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JCalendar JCalendario;
    private javax.swing.JTable JTableAgenda;
    private javax.swing.JButton btnFiltrar;
    private javax.swing.JButton btnGravar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnRemover;
    private javax.swing.JComboBox cboClientes;
    private javax.swing.JComboBox cboFuncioario;
    private javax.swing.JComboBox cboServicos;
    private com.toedter.calendar.JDateChooser dtaFim1;
    private com.toedter.calendar.JDateChooser dtaInicio1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private com.toedter.components.JSpinField sfHH;
    private com.toedter.components.JSpinField sfMM;
    private javax.swing.JTextArea txtTexto;
    // End of variables declaration//GEN-END:variables
}
