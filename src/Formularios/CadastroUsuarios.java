/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CadastroUsuarios.java
 *
 * Created on 31/01/2014, 13:17:12
 */
package Formularios;

import Banco.Conexao;
import Controle.UsuariosDAO;
import java.awt.Color;
import java.awt.Point;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.LimitExceededException;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import modelo.Usuarios;

/**
 *
 * @author Abel
 */
public class CadastroUsuarios extends javax.swing.JFrame {
    
    Connection conexao;
    String CheckRegistro = "";

    /** Creates new form CadastroUsuarios */
    public CadastroUsuarios() {
        initComponents();
        
        
        threadBtnOnTime.start();
        PreencherJTable();
        consultarFuncionarios();

   
    }
    
    public void LimparCampos(){
       
        
        dispose();
        new CadastroUsuarios().setVisible(true);
        
    }
    
    
       //Este método atualiza o botão "Gravar" quando necessário para o botão "Atualizar"
    private void btnEditarAtualizar()
    {
        
        if (!"".equals(txtID.getText())){
            btnGravar.setText("ATUALIZAR");
        }
        
        else if ("".equals(txtUsuario.getText())){
            btnGravar.setText("GRAVAR");
        }
    }
    
    private void consultarFuncionarios()
    {
        try
        {
            
            this.conexao = Conexao.getConexao();
            String sql = "Select nome from funcionarios";
            PreparedStatement ps = this.conexao.prepareStatement(sql);
            ResultSet rsts = ps.executeQuery();
            
            while(rsts.next())
                
                cboFuncionario.addItem(rsts.getString("nome"));
            
        
        }
        catch(SQLException err)
        {
        
        }
    }
    
    
   
    
    
     public void Filtrar_JTable()
    {
        TableRowSorter sorter = new TableRowSorter(JTableUsuario.getModel());
        JTableUsuario.setRowSorter(sorter);
        String texto = txtUsuario.getText();
        
        try
        {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + texto));
            
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Valor não encontrado", "Aviso - Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    
    private void PreencherJTable(){
        JTableUsuario.getColumnModel().getColumn(0).setPreferredWidth(50);
        JTableUsuario.getColumnModel().getColumn(1).setPreferredWidth(50);
        JTableUsuario.getColumnModel().getColumn(2).setPreferredWidth(50);
        JTableUsuario.getColumnModel().getColumn(3).setPreferredWidth(50);
        JTableUsuario.getColumnModel().getColumn(4).setPreferredWidth(25);
        
        DefaultTableModel modelo = (DefaultTableModel)JTableUsuario.getModel();
        modelo.setNumRows(0);
        
        try{
            
            this.conexao = Conexao.getConexao();
            String sql = "Select * from usuarios";
            PreparedStatement ps = this.conexao.prepareStatement(sql);
            ResultSet rst = ps.executeQuery();
            
            while(rst.next())
            modelo.addRow(new Object[]{rst.getString("id_funcionario"),
                                       rst.getString("funcionario"),
                                       rst.getString("id"),
                                       rst.getString("usuario"),
                                       rst.getString("nivel")});
            
                    
            
            
            
        }catch(SQLException err){
            JOptionPane.showMessageDialog(null, err);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        threadBtnOnTime = new org.netbeans.examples.lib.timerbean.Timer();
        P2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtUsuario = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cboNivelAcesso = new javax.swing.JComboBox();
        txtSenha = new javax.swing.JPasswordField();
        btnNovo = new javax.swing.JButton();
        btnGravar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTableUsuario = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtIDFuncionario = new javax.swing.JTextField();
        cboFuncionario = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Usuários");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        P2.setBorder(javax.swing.BorderFactory.createTitledBorder("Usuario e Senha"));

        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        jLabel6.setText("Código:");

        jLabel4.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        jLabel4.setText("Usuário:");

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        jLabel5.setText("Senha:");

        txtID.setEditable(false);
        txtID.setToolTipText("");
        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });
        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIDKeyPressed(evt);
            }
        });

        txtUsuario.setToolTipText("");
        txtUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtUsuarioMouseClicked(evt);
            }
        });
        txtUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsuarioActionPerformed(evt);
            }
        });
        txtUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUsuarioKeyPressed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        jLabel7.setText("Nivel de Acesso:");

        cboNivelAcesso.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboNivelAcesso.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Comum", "Administrador" }));

        txtSenha.setText("jPasswordField1");

        javax.swing.GroupLayout P2Layout = new javax.swing.GroupLayout(P2);
        P2.setLayout(P2Layout);
        P2Layout.setHorizontalGroup(
            P2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(P2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(P2Layout.createSequentialGroup()
                        .addGroup(P2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addGap(26, 26, 26)
                        .addGroup(P2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(P2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(P2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboNivelAcesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(237, Short.MAX_VALUE))))
        );
        P2Layout.setVerticalGroup(
            P2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(P2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(P2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(P2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(P2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel5))
                    .addGroup(P2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSenha)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(P2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cboNivelAcesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        btnNovo.setFont(new java.awt.Font("Monospaced", 1, 18));
        btnNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/Novo 22 x 22.png"))); // NOI18N
        btnNovo.setText("NOVO");
        btnNovo.setToolTipText("Clique para começar um registro novo");
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        btnGravar.setFont(new java.awt.Font("Monospaced", 1, 18));
        btnGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/Gravar 22 x 22.png"))); // NOI18N
        btnGravar.setText("GRAVAR");
        btnGravar.setToolTipText("Clique para gravar um registro");
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        btnSair.setFont(new java.awt.Font("Monospaced", 1, 18));
        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/Sair 22 x 22.png"))); // NOI18N
        btnSair.setText("SAIR");
        btnSair.setToolTipText("Clique para sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        btnExcluir.setFont(new java.awt.Font("Monospaced", 1, 18));
        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/Excluir 22 x 22.png"))); // NOI18N
        btnExcluir.setText("EXCLUIR");
        btnExcluir.setToolTipText("Clique para excluir um registro");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        JTableUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID_Funcionario", "Nome", "ID", "Usuario", "Nivel"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTableUsuario.getTableHeader().setReorderingAllowed(false);
        JTableUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTableUsuarioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JTableUsuario);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Funcionário Selecionado"));

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        jLabel1.setText("Código:");

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        jLabel2.setText("Funcionario:");

        txtIDFuncionario.setEditable(false);
        txtIDFuncionario.setToolTipText("");
        txtIDFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDFuncionarioActionPerformed(evt);
            }
        });
        txtIDFuncionario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIDFuncionarioKeyPressed(evt);
            }
        });

        cboFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFuncionarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(65, 65, 65)
                        .addComponent(txtIDFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(192, 192, 192))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1)
                    .addComponent(txtIDFuncionario, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cboFuncionario, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(22, 22, 22)
                            .addComponent(jScrollPane1))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(27, 27, 27)
                            .addComponent(btnNovo)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnGravar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnExcluir)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnSair)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(P2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(P2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnGravar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSair))
                    .addComponent(btnNovo))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(593, 571));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed

     if (!"".equals(txtUsuario.getText()))
     {
         int resp =  JOptionPane.showConfirmDialog(null, "Deseja criar um registro novo ? ", "Novo", JOptionPane.YES_NO_OPTION);
            if (resp == JOptionPane.YES_OPTION)
            { 
                LimparCampos();
            }
           
     }
        
        
}//GEN-LAST:event_btnNovoActionPerformed

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
            
        
        
        if ("".equals(txtUsuario.getText()) || ("".equals(txtSenha.getText())))
        {
            btnGravar.setEnabled(false);
            JTableUsuario.setVisible(false);
            
            
            if("".equals(txtUsuario.getText()))
            {
                txtUsuario.setText("Campo não preenchido");
                txtUsuario.setForeground(Color.RED);
            }
            else if("Campo não preenchido".equals(txtUsuario.getText()))
            {
                CheckRegistro = "'Campo não Preenchido'" + "\n" + "Não é um registro valido";              
            }
             if("".equals(txtSenha.getText()))
            {
                txtSenha.setText("Campo não preenchido");
                txtSenha.setForeground(Color.RED);
            }
            else if("Campo não preenchido".equals(txtSenha.getText()))
            {
                CheckRegistro = "'Campo não Preenchido'" + "\n" + "Não é um registro valido";              
            }
            
            if(!"".equals(CheckRegistro))
            {
                JOptionPane.showMessageDialog(null, CheckRegistro );
            }
        }
        else
        {
        
        
            verificaUsuario();
     
        
        }
        
        
    }//GEN-LAST:event_btnGravarActionPerformed

    
    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
if ("".equals(txtID.getText()))
        {
            JOptionPane.showMessageDialog(null, "Erro, nenhum registro selecionado");
        }
        
        else if (!"".equals(txtID.getText()))
        {
            
           int resp = JOptionPane.showConfirmDialog(null, "Deseja realmente excluir esse registro?", "Excluir", JOptionPane.YES_NO_OPTION);
           if (resp == JOptionPane.YES_OPTION) 
           {
                try{
            
            Usuarios usuarios = new Usuarios();
            usuarios.setId(Integer.parseInt(txtID.getText()));
            
            UsuariosDAO usuariosDAO = new UsuariosDAO();
            usuariosDAO.deletarDados(usuarios);
            JOptionPane.showMessageDialog(null, "Excluido com Sucesso");
            PreencherJTable();
            LimparCampos();
            
        }catch(SQLException err){
            JOptionPane.showMessageDialog(null, "Erro ao excluir " + err);
        }catch(Exception err){
            JOptionPane.showMessageDialog(null, "Erro ao excluir " + err);
        }
           }     
        }
        
        
        
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
      
      
       
    }//GEN-LAST:event_formWindowActivated

    private void threadBtnOnTimeOnTime(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threadBtnOnTimeOnTime
        // TODO add your handling code here:
        btnEditarAtualizar();
    }//GEN-LAST:event_threadBtnOnTimeOnTime

    private void JTableUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTableUsuarioMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount() == 2)
        {
            Point p = evt.getPoint();
            int row = JTableUsuario.rowAtPoint(p);
            int col = JTableUsuario.columnAtPoint(p);
            
            txtIDFuncionario.setText(String.valueOf(JTableUsuario.getModel().getValueAt(row, 0)));
            cboFuncionario.setSelectedItem(String.valueOf(JTableUsuario.getModel().getValueAt(row, 1)));
            txtID.setText(String.valueOf(JTableUsuario.getModel().getValueAt(row, 2)));
            txtUsuario.setText(String.valueOf(JTableUsuario.getModel().getValueAt(row, 3)));
            txtSenha.setText(String.valueOf(JTableUsuario.getModel().getValueAt(row, 4)));
            
            if("C".equals(JTableUsuario.getModel().getValueAt(row, 5))){
                cboNivelAcesso.setSelectedItem("Comum");
            }else{
                cboNivelAcesso.setSelectedItem("Administrador");
            }
        }
    }//GEN-LAST:event_JTableUsuarioMouseClicked

    private void txtIDFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDFuncionarioActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_txtIDFuncionarioActionPerformed

    private void txtIDFuncionarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDFuncionarioKeyPressed
        // TODO add your handling code here:
}//GEN-LAST:event_txtIDFuncionarioKeyPressed

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDActionPerformed

    private void txtIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDKeyPressed

    private void txtUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsuarioActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_txtUsuarioActionPerformed

    private void txtUsuarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsuarioKeyPressed
        
        
        Filtrar_JTable();
}//GEN-LAST:event_txtUsuarioKeyPressed

    private void cboFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFuncionarioActionPerformed
        // TODO add your handling code here:
        
        try
        {
            this.conexao = Conexao.getConexao();
            String sql = "select id from funcionarios where nome = ?";
            PreparedStatement ps = this.conexao.prepareStatement(sql);
            ps.setString(1, String.valueOf(cboFuncionario.getSelectedItem()));
            ResultSet rsts = ps.executeQuery();
            
            rsts.next();
            
            txtIDFuncionario.setText(rsts.getString("id"));
            
            
        }
        catch(SQLException erro)
        {
            
        }
        
    }//GEN-LAST:event_cboFuncionarioActionPerformed

    private void txtUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtUsuarioMouseClicked
        // TODO add your handling code here:
        if ("Campo não preenchido".equals(txtUsuario.getText()))
        {
            txtUsuario.setText("");
            txtUsuario.setForeground(Color.BLACK);
            btnGravar.setEnabled(true);  
        }
    }//GEN-LAST:event_txtUsuarioMouseClicked

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        
        int resp = JOptionPane.showConfirmDialog(null, "Deseja realmente sair ?", "Sair", JOptionPane.YES_NO_OPTION);
        
        if (resp == JOptionPane.YES_OPTION){
            
            dispose();
        }
        
        
        
        
    }//GEN-LAST:event_btnSairActionPerformed

    private void verificaUsuario()
    {
        try {
            this.conexao = Conexao.getConexao();
            String sql = "select us.id, fu.nome from usuarios us inner join funcionarios fu on us.id_funcionario = fu.id where fu.nome = ?";
            PreparedStatement ps = this.conexao.prepareStatement(sql);
            ps.setString(1, cboFuncionario.getSelectedItem().toString());
            ResultSet rsts = ps.executeQuery();
            
            if(rsts.next())
            {
                JOptionPane.showMessageDialog(null, "Esse funcionário já possui um usuario");
            }
            else
            {
                Usuarios usuarios = new Usuarios();
        
                UsuariosDAO usuariosDAO = new UsuariosDAO();
        
                usuarios.setIdFun(Integer.parseInt(txtIDFuncionario.getText()));
                usuarios.setFuncionario(String.valueOf(cboFuncionario.getSelectedItem()));
                usuarios.setUsuario(txtUsuario.getText());
                usuarios.setSenha(txtSenha.getText());
       
                        if(0 == cboNivelAcesso.getSelectedIndex())
                        {
                            usuarios.setNivel("C");
                        }  
                        else 
                        {
                            usuarios.setNivel("A");
                        }
                
                                if("".equals(txtID.getText()))
                                {
                
                                    usuariosDAO.insereDados(usuarios);
                                    JOptionPane.showMessageDialog(null, "Cadastrado com sucesso");
                                    JTableUsuario.setVisible(true);
                
                                }
                                else
                                {
                                    usuarios.setId(Integer.parseInt(txtID.getText()));
                                    usuariosDAO.atualizaDados(usuarios);
                                    JOptionPane.showMessageDialog(null, "Atualizado com sucesso");
                
                                }
                                LimparCampos();
                                PreencherJTable();
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(CadastroUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new CadastroUsuarios().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JTableUsuario;
    private javax.swing.JPanel P2;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnGravar;
    private javax.swing.JButton btnNovo;
    private javax.swing.JButton btnSair;
    private javax.swing.JComboBox cboFuncionario;
    private javax.swing.JComboBox cboNivelAcesso;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private org.netbeans.examples.lib.timerbean.Timer threadBtnOnTime;
    private javax.swing.JTextField txtID;
    public javax.swing.JTextField txtIDFuncionario;
    private javax.swing.JPasswordField txtSenha;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
