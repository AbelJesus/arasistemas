/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrmVendas.java
 *
 * Created on 10/02/2014, 21:18:56
 */
package Formularios;

import Banco.Conexao;
import Controle.VendasDAO;
import Testes.Cursores;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Currency;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Vendas;

/**
 *
 * @author Abel
 */
public class FrmVendas extends javax.swing.JFrame {
    
    //Este atributo é utilizado para adicionar as linhas na JTable conforme for add os items
    int count = -1;
    
    //Total da Venda
    double total = 0;
    
    Connection conexao;
    
     //Classe resonsavel por converter a Moeda
     DecimalFormat formater = new DecimalFormat("###,##0.00"); 
     
     //Objeto criado para ter acesso aos metodos para controle do banco
     VendasDAO vendasDAO = new VendasDAO();
     
     //Objeto criado para interação com os dados encapsulados
     Vendas vendas = new Vendas();
     
     //Atributo para armazenar numero do estoque e estoque minimo
   
     int estMin;
     
     DefaultTableModel modelo;
     
     
     
     
  

    /** Creates new form FrmVendas */
    public FrmVendas() {
        initComponents();
       
       
        
        //Faz o menu principal ficar de tela cheia e adiciona Background
       // this.setExtendedState(this.getExtendedState()|JFrame.MAXIMIZED_BOTH);
        
      
        

        
        AtivarDesativarControle(true, false, false);
        
        carregarCBOClientes();
     
        Date data = new Date();
        dtaDataAtual.setDate(data);
        dtaVencto.setDate(data);
        
        PnInfoPgto.setEnabled(false);
        
        sfQtde.setValue(0);
        configuraJTable();
        
        
       
        
        
        
        
    }
    
   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        PnInfoCliente = new javax.swing.JPanel();
        txtIDCliente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnConfirmarCliente = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cboClientes = new javax.swing.JComboBox();
        txtStatusCliente = new javax.swing.JTextField();
        dtaDataAtual = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        txtIDVenda = new javax.swing.JTextField();
        PnInfoItems = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtCodBarra = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtEstoque = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtVlrUnit = new javax.swing.JTextField();
        sfQtde = new com.toedter.components.JSpinField();
        jPanel1 = new javax.swing.JPanel();
        rdbServicos = new javax.swing.JRadioButton();
        RdbProdutos = new javax.swing.JRadioButton();
        cboProdutos = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTableItems = new javax.swing.JTable();
        PnInfoPgto = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        cboTipoPgto = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txtVlrParcela = new javax.swing.JTextField();
        dtaVencto = new com.toedter.calendar.JDateChooser();
        btnConfirmarVenda = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        sfNParc = new com.toedter.components.JSpinField();
        jLabel17 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        sfDesconto = new com.toedter.components.JSpinField();
        btnAddItem = new javax.swing.JButton();
        btnNovaVenda = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnConfirmarItens = new javax.swing.JButton();
        btnRemoverItem = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registrar Venda");
        setResizable(false);

        PnInfoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("Informação do Cliente"));

        txtIDCliente.setEditable(false);
        txtIDCliente.setFont(new java.awt.Font("Dialog", 0, 18));
        txtIDCliente.setToolTipText("Código do cliente");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel4.setText("Status:");

        btnConfirmarCliente.setFont(new java.awt.Font("Dialog", 0, 18));
        btnConfirmarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/Confirmar 22 x 22.png"))); // NOI18N
        btnConfirmarCliente.setText("Confirmar");
        btnConfirmarCliente.setToolTipText("Confirma o cliente");
        btnConfirmarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarClienteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel1.setText("ID Cliente:");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel2.setText("Cliente:");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel3.setText("Data:");

        cboClientes.setFont(new java.awt.Font("Dialog", 0, 18));
        cboClientes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione um Cliente" }));
        cboClientes.setToolTipText("Selecione um cliente para fazer a compra");
        cboClientes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboClientesItemStateChanged(evt);
            }
        });
        cboClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboClientesActionPerformed(evt);
            }
        });

        txtStatusCliente.setEditable(false);
        txtStatusCliente.setFont(new java.awt.Font("Dialog", 0, 18));
        txtStatusCliente.setToolTipText("Status do Cliente");

        dtaDataAtual.setToolTipText("Data da Venda");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel5.setText("ID Venda:");

        txtIDVenda.setEditable(false);
        txtIDVenda.setFont(new java.awt.Font("Dialog", 0, 18));
        txtIDVenda.setToolTipText("Código da venda");

        javax.swing.GroupLayout PnInfoClienteLayout = new javax.swing.GroupLayout(PnInfoCliente);
        PnInfoCliente.setLayout(PnInfoClienteLayout);
        PnInfoClienteLayout.setHorizontalGroup(
            PnInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnInfoClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PnInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PnInfoClienteLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dtaDataAtual, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PnInfoClienteLayout.createSequentialGroup()
                        .addGroup(PnInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PnInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtIDVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIDCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(PnInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PnInfoClienteLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStatusCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(btnConfirmarCliente))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PnInfoClienteLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PnInfoClienteLayout.setVerticalGroup(
            PnInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnInfoClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PnInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtIDVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PnInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIDCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PnInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dtaDataAtual, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PnInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnConfirmarCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtStatusCliente)
                        .addComponent(jLabel4))
                    .addComponent(jLabel3))
                .addContainerGap())
        );

        PnInfoItems.setBorder(javax.swing.BorderFactory.createTitledBorder("Informação dos Items"));

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel6.setText("Cod. Barra:");

        txtCodBarra.setEditable(false);
        txtCodBarra.setFont(new java.awt.Font("Dialog", 0, 18));
        txtCodBarra.setToolTipText("Código de barras");
        txtCodBarra.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtCodBarra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodBarraActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel8.setText("Estoque:");

        txtEstoque.setEditable(false);
        txtEstoque.setFont(new java.awt.Font("Dialog", 0, 18));
        txtEstoque.setText("0");

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel10.setText("Quantidade:");

        jLabel12.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel12.setText("Valor Unit:");

        txtVlrUnit.setEditable(false);
        txtVlrUnit.setFont(new java.awt.Font("Dialog", 0, 18));
        txtVlrUnit.setText("0");

        sfQtde.setToolTipText("Indique uma quantidade");
        sfQtde.setMinimum(1);
        sfQtde.setValue(1);
        sfQtde.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sfQtdeMouseClicked(evt);
            }
        });
        sfQtde.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sfQtdePropertyChange(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Operação"));
        jPanel1.setForeground(new java.awt.Color(255, 51, 51));

        buttonGroup1.add(rdbServicos);
        rdbServicos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rdbServicos.setSelected(true);
        rdbServicos.setText("Serviços");
        rdbServicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdbServicosMouseClicked(evt);
            }
        });
        rdbServicos.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                rdbServicosPropertyChange(evt);
            }
        });

        buttonGroup1.add(RdbProdutos);
        RdbProdutos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        RdbProdutos.setText("Produtos");
        RdbProdutos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RdbProdutosMouseClicked(evt);
            }
        });
        RdbProdutos.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                RdbProdutosPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdbServicos)
                    .addComponent(RdbProdutos))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdbServicos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RdbProdutos)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        cboProdutos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboProdutos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboProdutosItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout PnInfoItemsLayout = new javax.swing.GroupLayout(PnInfoItems);
        PnInfoItems.setLayout(PnInfoItemsLayout);
        PnInfoItemsLayout.setHorizontalGroup(
            PnInfoItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnInfoItemsLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PnInfoItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PnInfoItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PnInfoItemsLayout.createSequentialGroup()
                        .addComponent(txtEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sfQtde, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtCodBarra))
                .addGap(18, 18, 18)
                .addGroup(PnInfoItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PnInfoItemsLayout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtVlrUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cboProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PnInfoItemsLayout.setVerticalGroup(
            PnInfoItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnInfoItemsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PnInfoItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PnInfoItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(txtCodBarra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addGroup(PnInfoItemsLayout.createSequentialGroup()
                        .addComponent(cboProdutos)
                        .addGap(2, 2, 2)))
                .addGroup(PnInfoItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PnInfoItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtVlrUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PnInfoItemsLayout.createSequentialGroup()
                        .addGap(0, 21, Short.MAX_VALUE)
                        .addGroup(PnInfoItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PnInfoItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8)
                                .addComponent(jLabel10))
                            .addComponent(sfQtde, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(PnInfoItemsLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
        );

        JTableItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod Barra", "Produto", "Valor Unitário", "Quantidade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTableItems.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        JTableItems.getTableHeader().setReorderingAllowed(false);
        JTableItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTableItemsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JTableItems);
        if (JTableItems.getColumnModel().getColumnCount() > 0) {
            JTableItems.getColumnModel().getColumn(0).setResizable(false);
            JTableItems.getColumnModel().getColumn(1).setResizable(false);
            JTableItems.getColumnModel().getColumn(2).setResizable(false);
            JTableItems.getColumnModel().getColumn(3).setResizable(false);
        }

        PnInfoPgto.setBorder(javax.swing.BorderFactory.createTitledBorder("Informações de Pagamento"));

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel11.setText("Tipo de Pagamento:");

        cboTipoPgto.setFont(new java.awt.Font("Dialog", 0, 18));
        cboTipoPgto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Dinheiro", "Cartão de Crédito", "Crediário" }));
        cboTipoPgto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboTipoPgtoItemStateChanged(evt);
            }
        });
        cboTipoPgto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTipoPgtoActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel14.setText("Vencimento:");

        jLabel15.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel15.setText("Desconto:");

        jLabel16.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel16.setText("%");

        jLabel20.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel20.setText("Valor Parcela:");

        txtVlrParcela.setEditable(false);
        txtVlrParcela.setFont(new java.awt.Font("Dialog", 0, 18));
        txtVlrParcela.setText("0");
        txtVlrParcela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVlrParcelaActionPerformed(evt);
            }
        });

        dtaVencto.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dtaVenctoPropertyChange(evt);
            }
        });

        btnConfirmarVenda.setFont(new java.awt.Font("Dialog", 0, 18));
        btnConfirmarVenda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/Gravar 22 x 22.png"))); // NOI18N
        btnConfirmarVenda.setText("Confirmar Venda");
        btnConfirmarVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarVendaActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel13.setText("Nº Parcelas:");

        sfNParc.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sfNParcPropertyChange(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Dialog", 0, 36));
        jLabel17.setText("Total:");

        txtTotal.setEditable(false);
        txtTotal.setFont(new java.awt.Font("Dialog", 1, 36));
        txtTotal.setForeground(new java.awt.Color(-65536,true));
        txtTotal.setText("0");
        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });

        sfDesconto.setMaximum(100);
        sfDesconto.setMinimum(0);
        sfDesconto.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sfDescontoPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout PnInfoPgtoLayout = new javax.swing.GroupLayout(PnInfoPgto);
        PnInfoPgto.setLayout(PnInfoPgtoLayout);
        PnInfoPgtoLayout.setHorizontalGroup(
            PnInfoPgtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnInfoPgtoLayout.createSequentialGroup()
                .addGroup(PnInfoPgtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PnInfoPgtoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PnInfoPgtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PnInfoPgtoLayout.createSequentialGroup()
                                .addGroup(PnInfoPgtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel15))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PnInfoPgtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtVlrParcela)
                                    .addComponent(sfNParc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dtaVencto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(PnInfoPgtoLayout.createSequentialGroup()
                                        .addGroup(PnInfoPgtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cboTipoPgto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(PnInfoPgtoLayout.createSequentialGroup()
                                                .addComponent(sfDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel16)))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(PnInfoPgtoLayout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(PnInfoPgtoLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(btnConfirmarVenda)))
                .addContainerGap())
        );
        PnInfoPgtoLayout.setVerticalGroup(
            PnInfoPgtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnInfoPgtoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PnInfoPgtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cboTipoPgto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PnInfoPgtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(sfNParc, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PnInfoPgtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PnInfoPgtoLayout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel15))
                    .addGroup(PnInfoPgtoLayout.createSequentialGroup()
                        .addComponent(txtVlrParcela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dtaVencto, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PnInfoPgtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sfDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PnInfoPgtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnConfirmarVenda))
        );

        btnAddItem.setFont(new java.awt.Font("Dialog", 0, 18));
        btnAddItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/Add 22 x 22.png"))); // NOI18N
        btnAddItem.setText("Adicionar Item");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        btnNovaVenda.setFont(new java.awt.Font("Dialog", 0, 18));
        btnNovaVenda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/Novo 22 x 22.png"))); // NOI18N
        btnNovaVenda.setText("Nova Venda");
        btnNovaVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovaVendaActionPerformed(evt);
            }
        });

        btnCancelar.setFont(new java.awt.Font("Dialog", 0, 18));
        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/Remover 22 x 22.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnConfirmarItens.setFont(new java.awt.Font("Dialog", 0, 18));
        btnConfirmarItens.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/Confirmar 24 x 24 .png"))); // NOI18N
        btnConfirmarItens.setText("Confirmar");
        btnConfirmarItens.setToolTipText("Confirma o cliente");
        btnConfirmarItens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarItensActionPerformed(evt);
            }
        });

        btnRemoverItem.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnRemoverItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagems/Excluir 22 x 22.png"))); // NOI18N
        btnRemoverItem.setText("Remover");
        btnRemoverItem.setMaximumSize(new java.awt.Dimension(171, 33));
        btnRemoverItem.setMinimumSize(new java.awt.Dimension(171, 33));
        btnRemoverItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRemoverItemMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(PnInfoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PnInfoItems, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PnInfoPgto, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnNovaVenda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoverItem, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnConfirmarItens)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PnInfoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PnInfoItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNovaVenda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnConfirmarItens, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemoverItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, 0, 0, Short.MAX_VALUE)
                    .addComponent(PnInfoPgto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        
      try{
        
                if(rdbServicos.isSelected()){

                   double vlrUnit = Double.parseDouble(String.valueOf(formater.parse(txtVlrUnit.getText())));

                   PreencherJTableItems();
                   total = total + (vlrUnit * sfQtde.getValue());
                   txtTotal.setText(formater.format(total));
                   
                   

               }else{

                        if(sfQtde.getValue() > Integer.parseInt(txtEstoque.getText())){

                            JOptionPane.showMessageDialog(null, "Estoque não suficiente", "Erro", JOptionPane.INFORMATION_MESSAGE);
                            return;


                        }//FIM SE VERIFICA ESTOQUE


                        //Tratamento de erro do conversor de Moeda


                        //Seta o local para a Moeda brasileira
                        formater.setCurrency(Currency.getInstance(new Locale("pt", "BR")));

                        //Remove a virgula da moeda brasileira, obrigatório passar para String
                        String moeda = String.valueOf(formater.parse(txtVlrUnit.getText()));

                        //Inicializa o Atributo qtde informando a quantidade 
                        int qtde = sfQtde.getValue();

                        //Passa a moeda para o formato Americano, para trabalhas com as contas
                        Double vlrUnit = Double.parseDouble(moeda);


                        if(!"".equals(txtCodBarra.getText())){

                           total = total + (vlrUnit * qtde);

                           /**Passa a moeda para o formato Brasileiro novamente, adcionando a virgula, conforme configurado
                            * na classe DecimalFormat: DecimalFormat formater = new DecimalFormat("##0.00");
                            */
                           txtTotal.setText(String.valueOf(formater.format(total)));
                           
                           vendas.setQtdeEstoque(sfQtde.getValue());
                           vendas.setCod_barra(txtCodBarra.getText());

                           vendasDAO.removerEstoque(vendas);

                           txtEstoque.setText(String.valueOf(consultarEstoque(txtCodBarra.getText())));
                           
                           //Joga os Items adicionados na JTableItems
                           PreencherJTableItems();



                           txtCodBarra.grabFocus();

                           sfQtde.setValue(1);


                           txtCodBarra.setEnabled(true);






                        }//FIM SE VERIFICA SE COD_BARRA TA PREENCHIDO



               } //FIM SE VERIFICA SE É SERVICO OU PRODUTO      
        
        }catch(ParseException err){
                        JOptionPane.showMessageDialog(null, "erro ao converter moeda " + err);
        }     
        
       
        
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnConfirmarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarClienteActionPerformed
        
        if(0 == cboClientes.getSelectedIndex()){
            
            JOptionPane.showMessageDialog(null, "Selecione um Cliente", "Erro", JOptionPane.INFORMATION_MESSAGE);
            return;
            
        }
        
        AtivarDesativarControle(false, true, false); 
        btnCancelar.setEnabled(false);
        
     
            vendasDAO.ConfirmaVendaCab(vendas);
            
            carregaCBOPro();
           
            
            try{
                
                String sql = "Select id from Venda_cab";
                PreparedStatement ps = this.conexao.prepareStatement(sql);
                ResultSet rst = ps.executeQuery();
                rst.last();
                txtIDVenda.setText(rst.getString("id"));
                
            }catch(SQLException err){
                JOptionPane.showMessageDialog(null, "Erro ao puxar ID da Venda  " + err);
            }

        
    }//GEN-LAST:event_btnConfirmarClienteActionPerformed

    private void JTableItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTableItemsMouseClicked
      
    }//GEN-LAST:event_JTableItemsMouseClicked

    public void limparCampos(){
        
        txtIDCliente.setText("");
        txtIDVenda.setText("");
        cboClientes.setSelectedItem("Selecione um Cliente");
        txtStatusCliente.setText("Status");
        txtCodBarra.setText("");
        RdbProdutos.setSelected(true);
        txtEstoque.setText("0");
        sfQtde.setValue(1);
        txtVlrUnit.setText("0");
        txtTotal.setText("");
        cboTipoPgto.setSelectedItem("Selecione");
        sfDesconto.setValue(0);
        dtaVencto.cleanup();
        sfNParc.setValue(1);
        txtVlrParcela.setText("");

        AtivarDesativarControle(true, false, false);
        
        
    }
    
    
    private void btnNovaVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovaVendaActionPerformed
        
        if(!"".equals(txtIDVenda.getText())){
            
            int resp = JOptionPane.showConfirmDialog(null, "Deseja realmente abrir uma nova venda ?", "Nova Venda", JOptionPane.YES_NO_OPTION);
            
                if(resp == JOptionPane.YES_OPTION){
                  
                      int totalLinhas = JTableItems.getModel().getRowCount();
                      int linha = 0;  


                        //DEVOLVE O ESTOQUE    
                        for(int i = 0; i < totalLinhas; i++){

                               vendas.setQtdeEstoque(Integer.parseInt(String.valueOf(JTableItems.getModel().getValueAt(linha, 3)))); //é utilizado nos métodos removerEstoque e confirmaVendaDet
                               vendas.setCod_barra(String.valueOf(JTableItems.getModel().getValueAt(linha, 0)));

                               vendasDAO.adicionaEstoque(vendas);


                               linha++;


                       }         
                        
                      vendas.setId_venda(Integer.parseInt(txtIDVenda.getText()));
                      vendasDAO.cancelarVendaCab(vendas);
                     
                      dispose();
                      new FrmVendas().setVisible(true);
             
                      
            }
        
        }
   
    }//GEN-LAST:event_btnNovaVendaActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
      
           
                 btnNovaVenda.setEnabled(true);
                 btnAddItem.setEnabled(true);
                 btnRemoverItem.setEnabled(true);
                 btnConfirmarItens.setEnabled(true);
                 btnCancelar.setEnabled(false);
       
        
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnConfirmarVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarVendaActionPerformed
        
        AtivarDesativarControle(false,false,true);
        try{
            

        //Condição CREDIARIO     
        if(2 == cboTipoPgto.getSelectedIndex()){
            
                //Método desta classe responsavel por enviar as informações pra vendasDAO
                gravaVendaDet();
           
                int cont = sfNParc.getValue();
                
                Calendar ca = Calendar.getInstance();
                ca.setTime(dtaVencto.getDate());
                
                 vendas.setId_venda(Integer.parseInt(txtIDVenda.getText()));
                    
          
                 vendas.setId_cliente(Integer.parseInt(txtIDCliente.getText()));
                 vendas.setDataVenda(dtaDataAtual.getDate());
                 vendas.setTotal(Double.parseDouble(String.valueOf(formater.parse(txtTotal.getText()))));
                 vendas.setVlr_Parc(Double.parseDouble(String.valueOf(formater.parse(txtVlrParcela.getText()))));
                 vendas.setStatusVendaCab("I");
                 vendasDAO.atualizaVendaCab(vendas);
                    
   
                for (int i = 1; i <= cont; i++) {
                    
                     
                    vendas.setNParc(i);
                    ca.add(Calendar.MONTH, 1);
                    vendas.setDataVencto(ca.getTime());
                    vendasDAO.confirmaFluxoCaixaParcelas(vendas);
                    
                    
                   
                }
                
                JOptionPane.showMessageDialog(null, "Venda registrada com sucesso", "Venda", JOptionPane.INFORMATION_MESSAGE);
                limparCampos();
             
                
                
        }//Final CONDIÇÃO CREDIARIO
        
        //CONDIÇÃO DINHEIRO
        else if(0 == cboTipoPgto.getSelectedIndex()){
                 
             
                 gravaVendaDet();
                 
                FrmVendaVista fv = new FrmVendaVista();
            
                
                fv.retornaTotal(total, Integer.parseInt(txtIDCliente.getText()), Integer.parseInt(txtIDVenda.getText()));
                fv.setVisible(true);
            
            
        }//FIM DA CONDIÇÃO DINEHIRO
        
            
        
              }catch(ParseException err){
                  JOptionPane.showMessageDialog(null, "Erro ao converter moeda - 'btnContasReceber' " + err);
              }
        
         limparCampos();
         total = 0;
         modelo.setRowCount(0);
         sfQtde.setValue(0);
                      
                    
                  
             
    }//GEN-LAST:event_btnConfirmarVendaActionPerformed

    private void txtVlrParcelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVlrParcelaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVlrParcelaActionPerformed

    private void sfNParcFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sfNParcFocusLost
        
    }//GEN-LAST:event_sfNParcFocusLost

    private void sfNParcKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sfNParcKeyPressed
      
    }//GEN-LAST:event_sfNParcKeyPressed

    private void sfNParcMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sfNParcMouseExited
       
   
       
        txtVlrParcela.setText(String.valueOf(total / sfNParc.getValue()));
    }//GEN-LAST:event_sfNParcMouseExited

    private void cboClientesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboClientesItemStateChanged
        
    
            
      
    }//GEN-LAST:event_cboClientesItemStateChanged

    
    //Confirma os dados do cliente 
    private void cboClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboClientesActionPerformed
            if (!"Selecione um Cliente".equals(cboClientes.getSelectedItem())){
            
            dadosCboCliente();
        }
    }//GEN-LAST:event_cboClientesActionPerformed

    private void sfNParcPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sfNParcPropertyChange
        
        double conta = (total / sfNParc.getValue());
        
        txtVlrParcela.setText(formater.format(conta));
    }//GEN-LAST:event_sfNParcPropertyChange

    private void btnConfirmarItensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarItensActionPerformed
        AtivarDesativarControle(false,false,true);
        btnConfirmarItens.setEnabled(false);
        btnCancelar.setEnabled(true);
        sfNParc.setEnabled(false);
        dtaVencto.setEnabled(false);
        txtVlrParcela.setEnabled(false);
        btnConfirmarVenda.setEnabled(true);
    
    }//GEN-LAST:event_btnConfirmarItensActionPerformed

    private void cboTipoPgtoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTipoPgtoActionPerformed
       
        
    }//GEN-LAST:event_cboTipoPgtoActionPerformed

    private void dtaVenctoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dtaVenctoPropertyChange
        btnConfirmarVenda.setEnabled(true);
    }//GEN-LAST:event_dtaVenctoPropertyChange

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalActionPerformed

    private void sfDescontoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sfDescontoPropertyChange
           desconto();
    }//GEN-LAST:event_sfDescontoPropertyChange

    private void sfQtdePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sfQtdePropertyChange

    }//GEN-LAST:event_sfQtdePropertyChange

    private void sfQtdeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sfQtdeMouseClicked

    }//GEN-LAST:event_sfQtdeMouseClicked

    private void txtCodBarraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodBarraActionPerformed
      
       
        
        try{

            this.conexao = Conexao.getConexao();
            String sql = "Select id, Cod_Barra, descricao, valor_venda, estoque from produtos where cod_barra = ?";
            PreparedStatement ps = this.conexao.prepareStatement(sql);
            ps.setString(1, txtCodBarra.getText());
            ResultSet rsts = ps.executeQuery();

            if(rsts.next()){

                cboProdutos.setModel(new javax.swing.DefaultComboBoxModel(new String[] {rsts.getString("descricao")}));
                txtEstoque.setText(rsts.getString("estoque"));
                txtVlrUnit.setText(String.valueOf(formater.format(rsts.getDouble("valor_venda"))));
                txtEstoque.setEditable(false);
              

            }else{
                JOptionPane.showMessageDialog(null, "Produto não encontrado no sistema", "Erro", JOptionPane.INFORMATION_MESSAGE);
                txtCodBarra.setText("");
                txtCodBarra.grabFocus();
            }

        }catch(SQLException err){

        }
    }//GEN-LAST:event_txtCodBarraActionPerformed

    private void rdbServicosPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_rdbServicosPropertyChange
       
  
    }//GEN-LAST:event_rdbServicosPropertyChange

    private void RdbProdutosPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_RdbProdutosPropertyChange
        
    }//GEN-LAST:event_RdbProdutosPropertyChange

    private void rdbServicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdbServicosMouseClicked
        txtEstoque.setText("");
        txtCodBarra.setText("");
        
        cboProdutos.removeAllItems();
        carregaCBOPro();
        txtCodBarra.setEditable(false);
    }//GEN-LAST:event_rdbServicosMouseClicked

    private void RdbProdutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RdbProdutosMouseClicked
        
        
        if(RdbProdutos.isSelected() == true){
            cboProdutos.removeAllItems();
            carregaCBOPro();
            txtCodBarra.setEditable(true);
        }
       
        
    }//GEN-LAST:event_RdbProdutosMouseClicked

    private void cboProdutosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboProdutosItemStateChanged
         
        
        if(cboProdutos.getSelectedItem() != null){
            
            retornaItens();
            //JOptionPane.showMessageDialog(null, "Você selecionou este item " + cboProdutos.getSelectedItem());
        }
        
        
    }//GEN-LAST:event_cboProdutosItemStateChanged

    private void cboTipoPgtoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboTipoPgtoItemStateChanged
         
        //Dinheiro
        if(0 == cboTipoPgto.getSelectedIndex()){
            
            sfNParc.setEnabled(false);
            dtaVencto.setEnabled(true);
            txtVlrParcela.setEnabled(false);
            btnConfirmarVenda.setEnabled(true);
            sfDesconto.setEnabled(true);
         
         
        //Cartão    
        } else if (1 == cboTipoPgto.getSelectedIndex()){
            sfNParc.setEnabled(false);
            dtaVencto.setEnabled(false);
            txtVlrParcela.setEnabled(false);
            btnConfirmarVenda.setEnabled(true);
            sfDesconto.setEnabled(true);
        
        //Crediario  
        }else if(2 == cboTipoPgto.getSelectedIndex()){
            sfNParc.setEnabled(true);
            dtaVencto.setEnabled(true);
            txtVlrParcela.setEnabled(true);
            btnConfirmarVenda.setEnabled(false);
            sfDesconto.setEnabled(false);
        }
    }//GEN-LAST:event_cboTipoPgtoItemStateChanged

    private void btnRemoverItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemoverItemMouseClicked
        
         int[] l = JTableItems.getSelectedRows();
                    
                 DefaultTableModel dtm = (DefaultTableModel) JTableItems.getModel();
                 for (int i = (l.length - 1); i >= 0; --i) {
                     
                      
                   
                      try {
                            
                            
                        
                            
                            
                            int vlrUnit = Integer.parseInt(String.valueOf(formater.parse(String.valueOf(JTableItems.getModel().getValueAt(i, 2)))));
                            int qtde = Integer.parseInt(String.valueOf(JTableItems.getModel().getValueAt(i, 3)));
                            String codBarra = String.valueOf(JTableItems.getModel().getValueAt(i, 0)); 
                            if(codBarra.isEmpty() == false)
                                    {                                                  
                                        vendas.setQtdeEstoque(qtde);                                                  
                                        vendas.setCod_barra(codBarra);                                                  
                                        vendasDAO.adicionaEstoque(vendas);
                                        //SE O PRODUTO ESTIVER SELECIONADO NA TELA, ATUALIZA EM TEMPO REAL                                                    
                                        if(txtCodBarra.getText().equals(codBarra))
                                        {                                                        
                                            txtEstoque.setText(String.valueOf(consultarEstoque(codBarra)));                                                     
                                        }                                             
                                    }
                           
                            total = total - (vlrUnit * qtde);
                            txtTotal.setText(formater.format(total));
                           
                            
                            
                        } catch (ParseException ex) {
                            Logger.getLogger(FrmVendas.class.getName()).log(Level.SEVERE, null, ex);
                        }
                      
                      dtm.removeRow(l[i]);//remove todas as linhas selecionadas
                      
                        
           }
                 
                
      
                      
        
    }//GEN-LAST:event_btnRemoverItemMouseClicked


    
    //Método responsavel por mandar os dados do cliente para a classe de encapsulamento 'Vendas'
    private void dadosCboCliente(){

          try{ 
            this.conexao = Conexao.getConexao();
            
            String sql = "Select id, status  from clientes where nome = ?";
            PreparedStatement ps = this.conexao.prepareStatement(sql);
            ps.setString(1, String.valueOf(cboClientes.getSelectedItem()));
            ResultSet rsts = ps.executeQuery();
            
            rsts.next();
            
            if("I".equals(rsts.getString("status"))){
                
             //Pergunta se deseja fazer a venda mesmo quando o Cliente esta IRREGULAR 
             int resp = JOptionPane.showConfirmDialog(null, "Este Cliente esta em situação IRREGULAR, deseja realmente fazer esta venda ?", "Cliente irrgular", +
                                                    JOptionPane.YES_NO_OPTION);
                //Resposta SIM    
                if(resp == JOptionPane.YES_OPTION){
                    
                    //Deixa a fonte em Vermelho porque esta em situação IRREGULAR
                     txtStatusCliente.setForeground(new java.awt.Color(-65536,true));
                     
                    //Carrega txtStatus com IRREGULAR
                     txtStatusCliente.setText("Irregular");
                
                 
                 }
            
            
            }else{  
                
               //Deixa a fonte em Verde porque esta em situação REGULAR
               txtStatusCliente.setForeground(new java.awt.Color(-16711936,true));
                  
               //Carrega txtStatus como REGULAR
               txtStatusCliente.setText("Regular");
              
                    
                }//Fim da Condição
            
              
            //Carregar TextBox´s
               txtIDCliente.setText(rsts.getString("id"));
         
            //Enviar Dados pro Encapsulamento
               vendas.setId_cliente(rsts.getInt("id"));
               vendas.setDataVenda(dtaDataAtual.getDate());
               vendas.setTotal(total);
               vendas.setStatusCliente(rsts.getString("status"));
      
            }catch(SQLException err){
                JOptionPane.showMessageDialog(null, "Erro ao trazer dados CBO Clientes " + err);
            }
        
    }
    
    //Método responsável por Carregar a cboClientes com o nome do Cliente quando abrir o formulário
    private void carregarCBOClientes(){
        
      try{  
        this.conexao = Conexao.getConexao();
        
        String sql = "Select nome from clientes";
        PreparedStatement ps = this.conexao.prepareStatement(sql);
        ResultSet rsts = ps.executeQuery();
        
        while(rsts.next())
            
            cboClientes.addItem(rsts.getString("nome"));
        
        
      }catch(SQLException err){
          JOptionPane.showMessageDialog(null, "Erro ao carregar CBO Clientes " + err);
      }      
    }
    
    
    //Método responsável pelo calculo do desconto
    private void desconto(){
        
        double desc = sfDesconto.getValue();
        double to = total;
        
       
        total = (to - (to * (desc / 100)));
        txtTotal.setText(formater.format(total));
    }
    
    
    
    private void AtivarDesativarControle(boolean pn1,boolean pn2,boolean pn3){
        
        //PnInfoCliente
        btnConfirmarCliente.setEnabled(pn1);
        cboClientes.setEnabled(pn1);
        dtaDataAtual.setEnabled(false);
        
        
        //PnInfoItems
        txtCodBarra.setEnabled(pn2);
        RdbProdutos.setEnabled(pn2);
        cboProdutos.setEnabled(pn2);
        sfQtde.setEnabled(pn2);
        
        btnAddItem.setEnabled(pn2);
        btnRemoverItem.setEnabled(pn2);
        btnNovaVenda.setEnabled(pn2);
        btnCancelar.setEnabled(pn2);
        btnConfirmarItens.setEnabled(pn2);
       
        
        //PninfoTipoPgto
        cboTipoPgto.setEnabled(pn3);
        sfNParc.setEnabled(pn3);
        dtaVencto.setEnabled(pn3);
        sfDesconto.setEnabled(pn3);
        txtVlrParcela.setEnabled(pn3);
        btnConfirmarVenda.setEnabled(false);
        
    
    }
    
 
    
    
    //Método responsável pelo preenchimento da JTableItens
     private void PreencherJTableItems(){
        
       
        
        String[] items = new String[5];
        
        items[0] = txtCodBarra.getText();
        items[1] = String.valueOf(cboProdutos.getSelectedItem());
        items[2] = String.valueOf(txtVlrUnit.getText());
        items[3] = String.valueOf(sfQtde.getValue());
       
       
             
 
      
        modelo.insertRow(0, items);
     
         
         
        
    }
     
     //Método utilizado para fazer uma consulta ao estoque
     private int consultarEstoque(String codBarra){
         
         int es = 0;
         
         try{
           //Executa esta instrução para atualizar o atributo estoque
           String sql = "Select estoque, estoque_min from produtos where cod_barra = ?";
           PreparedStatement ps = this.conexao.prepareStatement(sql);
           ps.setString(1, codBarra);
           ResultSet rsts = ps.executeQuery();
           rsts.next();
           es = rsts.getInt("estoque");
           estMin = rsts.getInt("estoque_min");
           
         }catch(SQLException err){
           JOptionPane.showMessageDialog(null, "Erro ao consultar Estoque " + err);
         }
         
         return es;
     }
     
     
     //ESTE MÉTODO GRAVA TUDO QUE ESTA NA JTABLE ITEMS
     private void gravaVendaDet(){
         
  
        int totalLinhas = JTableItems.getModel().getRowCount();
        int linha = 0;
        
        try{
            
        for(int i = 0; i < totalLinhas; i++){
        
        
         vendas.setQtdeEstoque(Integer.parseInt(String.valueOf(JTableItems.getModel().getValueAt(linha, 3)))); //é utilizado nos métodos removerEstoque e confirmaVendaDet
         vendas.setCod_barra(String.valueOf(JTableItems.getModel().getValueAt(linha, 0)));
         vendas.setId_venda(Integer.parseInt(txtIDVenda.getText()));
         vendas.setVlr_custo(Double.parseDouble(String.valueOf(formater.parse(String.valueOf(JTableItems.getModel().getValueAt(linha, 2))))));
                     


                   
          //vendasDAO.removerEstoque(vendas);
          vendasDAO.addVendaDet(vendas);
          
          linha++;
          
        }
        
        
                     
        }catch(ParseException err){
            
        }
        
   
                    
     }
     
     private void carregaCBOPro(){
         
         String sql;
        
         if(rdbServicos.isSelected()){
             
             sql = "Select * from servicos";
             
         }else{
             sql = "Select * from produtos";
         }
         
         
         
         try {
            this.conexao = Conexao.getConexao();
            
            
            PreparedStatement ps = this.conexao.prepareStatement(sql);
            ResultSet rsts = ps.executeQuery();
            
            while(rsts.next()){
                cboProdutos.addItem(rsts.getString("descricao"));
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(FrmVendas.class.getName()).log(Level.SEVERE, null, ex);
        }
         
     }
     
     private void retornaItens(){
            
         String sql;
        
         if(rdbServicos.isSelected()){
             
             sql = "Select vlr_unit from servicos where descricao = ?";
             
         }else{
             sql = "Select cod_barra, estoque, valor_custo from produtos where descricao = ?";
         }
         
         
         
         try {
            this.conexao = Conexao.getConexao();
            
            
            PreparedStatement ps = this.conexao.prepareStatement(sql);
            ps.setString(1, String.valueOf(cboProdutos.getSelectedItem()));
            ResultSet rsts = ps.executeQuery();
            
            
            while(rsts.next()){
                if(rdbServicos.isSelected()){
                    
                    txtVlrUnit.setText(formater.format(rsts.getDouble("vlr_unit")));
                    
                }else{
                    txtCodBarra.setText(rsts.getString("cod_barra"));
                    txtEstoque.setText(rsts.getString("estoque"));
                    txtVlrUnit.setText(formater.format(rsts.getDouble("valor_custo")));
                }
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(FrmVendas.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
     
     private void configuraJTable(){
          //Configura a JTableItems
        JTableItems.getColumnModel().getColumn(0).setPreferredWidth(100);
        JTableItems.getColumnModel().getColumn(1).setPreferredWidth(100);
        JTableItems.getColumnModel().getColumn(2).setPreferredWidth(100);
        JTableItems.getColumnModel().getColumn(3).setPreferredWidth(100);
       
        
        modelo = (DefaultTableModel)JTableItems.getModel();
     }
     

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FrmVendas().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JTableItems;
    private javax.swing.JPanel PnInfoCliente;
    private javax.swing.JPanel PnInfoItems;
    private javax.swing.JPanel PnInfoPgto;
    private javax.swing.JRadioButton RdbProdutos;
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnConfirmarCliente;
    private javax.swing.JButton btnConfirmarItens;
    private javax.swing.JButton btnConfirmarVenda;
    private javax.swing.JButton btnNovaVenda;
    private javax.swing.JToggleButton btnRemoverItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cboClientes;
    private javax.swing.JComboBox cboProdutos;
    private javax.swing.JComboBox cboTipoPgto;
    private com.toedter.calendar.JDateChooser dtaDataAtual;
    private com.toedter.calendar.JDateChooser dtaVencto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rdbServicos;
    private com.toedter.components.JSpinField sfDesconto;
    private com.toedter.components.JSpinField sfNParc;
    private com.toedter.components.JSpinField sfQtde;
    private javax.swing.JTextField txtCodBarra;
    private javax.swing.JTextField txtEstoque;
    private javax.swing.JTextField txtIDCliente;
    private javax.swing.JTextField txtIDVenda;
    private javax.swing.JTextField txtStatusCliente;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtVlrParcela;
    private javax.swing.JTextField txtVlrUnit;
    // End of variables declaration//GEN-END:variables
}
